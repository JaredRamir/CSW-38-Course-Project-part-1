<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Particle Swarm — Part 2</title>
<style>
  html,body{height:100%;margin:0;background:#071033;color:#e8f2ff;font-family:system-ui;}
  .wrap{width:96vw; max-width:1200px; height:88vh; margin:2vh auto; background:rgba(255,255,255,0.02); border-radius:12px; padding:12px; display:flex; flex-direction:column;}
  header{padding:8px 12px;font-weight:600;}
  canvas{flex:1; border-radius:8px; display:block; width:100%; height:100%;}
  footer{padding:8px 12px; font-size:0.9rem;}
  .controls {display:flex; gap:8px; align-items:center;}
  .controls input[type="range"]{width:160px;}
  a { color: #9ecbff; text-decoration:underline; }
</style>
</head>
<body>
<div class="wrap">
  <header>CSW 38 — Part 2: Swarm of Particles — <span class="controls">Particles: <span id="count"></span> &nbsp; <label>Density <input id="density" type="range" min="20" max="400" value="120"></label></span></header>
  <canvas id="c"></canvas>
  <footer>Part 2 file: F.Lastname.part_2.htm — <a href="F.Lastname.part_1.htm">Go to Part 1</a></footer>
</div>

<script>
(() => {
  const canvas = document.getElementById('c');
  const ctx = canvas.getContext('2d');
  const density = document.getElementById('density');
  const countLabel = document.getElementById('count');

  function resize() {
    const w = canvas.clientWidth;
    const h = canvas.clientHeight;
    canvas.width = Math.floor(w * devicePixelRatio);
    canvas.height = Math.floor(h * devicePixelRatio);
    ctx.setTransform(devicePixelRatio, 0, 0, devicePixelRatio, 0, 0);
  }
  resize();
  window.addEventListener('resize', resize);

  class Particle {
    constructor(x,y,r,color,dx,dy){
      this.x = x;
      this.y = y;
      this.radius = r;
      this.color = color;
      this.dx = dx;
      this.dy = dy;
    }
    draw(ctx){
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI*2);
      ctx.fillStyle = this.color;
      ctx.fill();
    }
    update(w,h){
      this.x += this.dx;
      this.y += this.dy;
      // bounce
      if (this.x - this.radius <= 0) { this.x = this.radius; this.dx = Math.abs(this.dx); }
      if (this.x + this.radius >= w) { this.x = w-this.radius; this.dx = -Math.abs(this.dx); }
      if (this.y - this.radius <= 0) { this.y = this.radius; this.dy = Math.abs(this.dy); }
      if (this.y + this.radius >= h) { this.y = h-this.radius; this.dy = -Math.abs(this.dy); }
    }
  }

  function rand(min,max){ return Math.random() * (max-min) + min; }
  function randColor(){
    const hues = [200,210,220,240,260,280]; // cool palette
    const h = hues[Math.floor(Math.random()*hues.length)];
    return `hsl(${h} ${rand(60,85)}% ${rand(45,65)}%)`;
  }

  let particles = [];

  function createParticles(n){
    particles = [];
    const w = canvas.clientWidth;
    const h = canvas.clientHeight;
    for (let i=0;i<n;i++){
      const r = rand(4,14);
      const x = rand(r, w - r);
      const y = rand(r, h - r);
      const speed = rand(0.4, 2.2);
      const angle = rand(0, Math.PI*2);
      const dx = Math.cos(angle) * speed;
      const dy = Math.sin(angle) * speed;
      particles.push(new Particle(x,y,r, randColor(), dx, dy));
    }
    countLabel.textContent = particles.length;
  }

  // initial
  createParticles(parseInt(density.value,10));

  density.addEventListener('input', () => {
    createParticles(parseInt(density.value,10));
  });

  function loop(){
    ctx.clearRect(0,0,canvas.clientWidth, canvas.clientHeight);
    for (const p of particles){
      p.update(canvas.clientWidth, canvas.clientHeight);
      p.draw(ctx);
    }
    requestAnimationFrame(loop);
  }
  requestAnimationFrame(loop);
})();
</script>
</body>
</html>
